{"ast":null,"code":"// In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the old content will have been purged and\n            // the fresh content will have been added to the cache.\n            // It's the perfect time to display a \"New content is\n            // available; please refresh.\" message in your web app.\n            console.log('New content is available; please refresh.');\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.');\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://goo.gl/SC7cgQ');\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["/Users/macpro/Documents/Fundme/src/sw.js"],"names":["registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","checkValidServiceWorker","fetch","response","status","headers","get","indexOf","ready","unregister","window","location","reload","isLocalhost","Boolean","hostname","match","process","env","NODE_ENV","publicUrl","URL","PUBLIC_URL","origin","addEventListener"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA,SAASA,eAAT,CAAyBC,KAAzB,EAAgC;AAC/BC,EAAAA,SAAS,CAACC,aAAV,CACEC,QADF,CACWH,KADX,EAEEI,IAFF,CAEQC,YAAD,IAAkB;AACvBA,IAAAA,YAAY,CAACC,aAAb,GAA6B,MAAM;AAClC,YAAMC,gBAAgB,GAAGF,YAAY,CAACG,UAAtC;;AACAD,MAAAA,gBAAgB,CAACE,aAAjB,GAAiC,MAAM;AACtC,YAAIF,gBAAgB,CAACG,KAAjB,KAA2B,WAA/B,EAA4C;AAC3C,cAAIT,SAAS,CAACC,aAAV,CAAwBS,UAA5B,EAAwC;AACvC;AACA;AACA;AACA;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACA,WAND,MAMO;AACN;AACA;AACA;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACA;AACD;AACD,OAfD;AAgBA,KAlBD;AAmBA,GAtBF,EAuBEC,KAvBF,CAuBSC,KAAD,IAAW;AACjBH,IAAAA,OAAO,CAACG,KAAR,CAAc,2CAAd,EAA2DA,KAA3D;AACA,GAzBF;AA0BA;;AAED,SAASC,uBAAT,CAAiChB,KAAjC,EAAwC;AACvC;AACAiB,EAAAA,KAAK,CAACjB,KAAD,CAAL,CACEI,IADF,CACQc,QAAD,IAAc;AACnB;AACA,QACCA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IACAD,QAAQ,CAACE,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,EAAqCC,OAArC,CAA6C,YAA7C,MAA+D,CAAC,CAFjE,EAGE;AACD;AACArB,MAAAA,SAAS,CAACC,aAAV,CAAwBqB,KAAxB,CAA8BnB,IAA9B,CAAoCC,YAAD,IAAkB;AACpDA,QAAAA,YAAY,CAACmB,UAAb,GAA0BpB,IAA1B,CAA+B,MAAM;AACpCqB,UAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACA,SAFD;AAGA,OAJD;AAKA,KAVD,MAUO;AACN;AACA5B,MAAAA,eAAe,CAACC,KAAD,CAAf;AACA;AACD,GAjBF,EAkBEc,KAlBF,CAkBQ,MAAM;AACZF,IAAAA,OAAO,CAACC,GAAR,CAAY,+DAAZ;AACA,GApBF;AAqBA;;AAED,MAAMe,WAAW,GAAGC,OAAO,CAACJ,MAAM,CAACC,QAAP,CAAgBI,QAAhB,KAA6B,WAA7B,IAC3B;AACAL,MAAM,CAACC,QAAP,CAAgBI,QAAhB,KAA6B,OAFF,IAG3B;AACAL,MAAM,CAACC,QAAP,CAAgBI,QAAhB,CAAyBC,KAAzB,CAA+B,wDAA/B,CAJ0B,CAA3B;AAMA,eAAe,SAAS5B,QAAT,GAAoB;AAClC,MAAI6B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,mBAAmBjC,SAAhE,EAA2E;AAC1E;AACA,UAAMkC,SAAS,GAAG,IAAIC,GAAJ,CAAQJ,OAAO,CAACC,GAAR,CAAYI,UAApB,EAAgCZ,MAAM,CAACC,QAAvC,CAAlB;;AACA,QAAIS,SAAS,CAACG,MAAV,KAAqBb,MAAM,CAACC,QAAP,CAAgBY,MAAzC,EAAiD;AAChD;AACA;AACA;AACA;AACA;;AAEDb,IAAAA,MAAM,CAACc,gBAAP,CAAwB,MAAxB,EAAgC,MAAM;AACrC,YAAMvC,KAAK,aAAMgC,OAAO,CAACC,GAAR,CAAYI,UAAlB,uBAAX;;AAEA,UAAIT,WAAJ,EAAiB;AAChB;AACAZ,QAAAA,uBAAuB,CAAChB,KAAD,CAAvB,CAFgB,CAIhB;AACA;;AACAC,QAAAA,SAAS,CAACC,aAAV,CAAwBqB,KAAxB,CAA8BnB,IAA9B,CAAmC,MAAM;AACxCQ,UAAAA,OAAO,CAACC,GAAR,CACC,2DACA,oDAFD;AAIA,SALD;AAMA,OAZD,MAYO;AACN;AACAd,QAAAA,eAAe,CAACC,KAAD,CAAf;AACA;AACD,KAnBD;AAoBA;AACD;AAED,OAAO,SAASwB,UAAT,GAAsB;AAC5B,MAAI,mBAAmBvB,SAAvB,EAAkC;AACjCA,IAAAA,SAAS,CAACC,aAAV,CAAwBqB,KAAxB,CAA8BnB,IAA9B,CAAoCC,YAAD,IAAkB;AACpDA,MAAAA,YAAY,CAACmB,UAAb;AACA,KAFD;AAGA;AACD","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nfunction registerValidSW(swUrl) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the old content will have been purged and\n\t\t\t\t\t\t\t// the fresh content will have been added to the cache.\n\t\t\t\t\t\t\t// It's the perfect time to display a \"New content is\n\t\t\t\t\t\t\t// available; please refresh.\" message in your web app.\n\t\t\t\t\t\t\tconsole.log('New content is available; please refresh.');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\tresponse.headers.get('content-type').indexOf('javascript') === -1\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.1/8 is considered localhost for IPv4.\n\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nexport default function register() {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Lets check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://goo.gl/SC7cgQ'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not local host. Just register service worker\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}